// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Use the DATABASE_URL
}

// User management
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  templates     Template[]
  audits        Audit[]
}

enum Role {
  ADMIN
  USER
}

// Client management
model Client {
  id            String    @id @default(uuid())
  name          String
  industry      String
  employeeCount Int
  locations     Int
  riskLevel     RiskLevel
  logo          String?
  contacts      Json      // Stores contact information as JSON
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  audits        Audit[]
  assignedTemplates ClientTemplate[]
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
}

// Template management
model Template {
  id            String    @id @default(uuid())
  name          String
  description   String
  createdBy     User      @relation(fields: [userId], references: [id])
  userId        String
  disclaimer    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sections      Section[]
  audits        Audit[]
  assignedClients ClientTemplate[]
  isArchived    Boolean   @default(false)
  tags          TemplateTag[]
}

model ClientTemplate {
  id          String    @id @default(uuid())
  client      Client    @relation(fields: [clientId], references: [id])
  clientId    String
  template    Template  @relation(fields: [templateId], references: [id])
  templateId  String
  assignedAt  DateTime  @default(now())

  @@unique([clientId, templateId])
}

model Section {
  id          String    @id @default(uuid())
  title       String
  order       Int
  template    Template  @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId  String
  fields      Field[]
  weight      Float     @default(1.0)  // For weighted scoring
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Field {
  id              String    @id @default(uuid())
  section         Section   @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId       String
  question        String
  type            FieldType
  required        Boolean   @default(false)
  order          Int
  options         Json?     // For multipleChoice, checkbox options
  settings        Json?     // For slider settings, etc.
  aiEnabled       Boolean   @default(false)
  scoring         Json?     // Scoring configuration
  tags            FieldTag[]
  responses       Response[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum FieldType {
  TEXT
  NUMBER
  YES_NO
  MULTIPLE_CHOICE
  CHECKBOX
  DATE
  SLIDER
  INSTRUCTION
}

// Tag system
model Tag {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  templates   TemplateTag[]
  fields      FieldTag[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model FieldTag {
  id        String    @id @default(uuid())
  field     Field     @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId   String
  tag       Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId     String

  @@unique([fieldId, tagId])
}

model TemplateTag {
  id          String    @id @default(uuid())
  template    Template  @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId  String
  tag         Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId       String
  createdAt   DateTime  @default(now())

  @@unique([templateId, tagId])
}

// Audit system
model Audit {
  id            String    @id @default(uuid())
  client        Client    @relation(fields: [clientId], references: [id])
  clientId      String
  template      Template  @relation(fields: [templateId], references: [id])
  templateId    String
  auditor       User      @relation(fields: [auditorId], references: [id])
  auditorId     String
  status        AuditStatus
  responses     Response[]
  scoring       Json?     // Stores total and section scores
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  completedAt   DateTime?
}

enum AuditStatus {
  DRAFT
  COMPLETED
}

model Response {
  id                String    @id @default(uuid())
  audit            Audit     @relation(fields: [auditId], references: [id], onDelete: Cascade)
  auditId          String
  field            Field     @relation(fields: [fieldId], references: [id])
  fieldId          String
  value            String    // Store all values as strings, parse as needed
  photos           String[]  // Array of photo URLs
  notes            String?
  aiRecommendation String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@unique([auditId, fieldId])
}

// System settings
model Settings {
  id              String    @id @default(uuid())
  companyName     String
  logo            String?
  defaultEmail    String?
  aiSettings      Json?     // OpenAI configuration
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}